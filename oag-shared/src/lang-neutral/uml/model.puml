@startuml
'https://plantuml.com/class-diagram
!include lang-neutral.puml

enum ModelKind {
	''
	primitive
	array
	record
	typed
}
enum PrimitiveModelTypes {
	integer
	number
	string
	enum
	boolean
	null
	any
}

interface Model << (I,#DC143C) >> extends LangNeutral {
	ModelKind kind
	string? name
}
interface UnionModel << (I,#DC143C) >> extends Model {
	Model[]? unionOf
}
interface TypedModel << (I,#DC143C) >> extends Model {
}

interface SchemaModel << (I,#00FFFF) >> extends Model, OpenApiLangNeutral {
}
interface PrimitiveModel << (I,#DC143C) >> extends SchemaModel {
	PrimitiveModelTypes jsdType
}
interface ArrayModel << (I,#DC143C) >> extends SchemaModel {
	Model items
}
interface RecordModel << (I,#DC143C) >> extends SchemaModel,UnionModel {
	Model[]? extendsFrom
	Dict<string, Model> properties
	(Model | false) additionalProperties
}
class BaseModel << (C,#FFFF00) >> extends BaseLangNeutral implements Model {
}
BaseModel ..|> FileBasedLangNeutral : may implement if named
BaseModel ..|> UnionModel : may implement

class BaseSchemaModel extends BaseModel implements SchemaModel {
}
class BaseArrayModel << (C,#FFFF00) >> extends BaseSchemaModel,BaseOpenApiLangNeutral implements ArrayModel {
}
class BaseRecordModel << (C,#FFFF00) >> extends BaseSchemaModel,BaseOpenApiLangNeutral implements RecordModel {
}
BaseRecordModel ..|> UnionModel : may implement
class BasePrimitiveModel << (C,#FFFF00) >> extends BaseSchemaModel,BaseOpenApiLangNeutral implements PrimitiveModel {
}
class BaseTypedModel << (C,#FFFF00) >> extends BaseModel implements TypedModel {
}

legend top right
  <b>Legend:</b>
  <back:DC143C><color:black>CodeGenAst</color></back>
  <back:FFFF00><color:black>Visible only to external sub-classes.</color></back>
  <back:00FFFF><color:black>OpenApi Adapter</color></back>
  Everything else is an internal construct.
end legend

@enduml
